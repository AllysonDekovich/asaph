#!/usr/bin/env python3
"""
Copyright 2019 Ronald J. Nowling

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""


import argparse
from collections import defaultdict
import os
import sys
import warnings

import numpy as np
from scipy import stats

import matplotlib
matplotlib.use("PDF")
import matplotlib.pyplot as plt
import seaborn as sns

def read_pca_coordinates(flname):
    sample_coordinates = []
    sample_names = []
    with open(flname) as fl:
        # skip header
        next(fl)
        for ln in fl:
            cols = ln.split("\t")

            sample_name = cols[0]
            coordinates = list(map(float, cols[1:]))
            
            sample_names.append(sample_name)
            sample_coordinates.append(coordinates)

    return sample_names, np.array(sample_coordinates)

def read_labels(flname):
    sample_indices = dict()

    with open(flname) as fl:
        for label_idx, ln in enumerate(fl):
            cols = ln.strip().split(",")

            label = cols[0]

            for sample_name in cols[1:]:
                sample_indices[sample_name] = label_idx

    return sample_indices

def read_label_names(flname):
    sample_indices = dict()

    with open(flname) as fl:
        for label_idx, ln in enumerate(fl):
            cols = ln.strip().split(",")

            label = cols[0]

            for sample_name in cols[1:]:
                sample_indices[sample_name] = label

    return sample_indices

def pairwise(iterable):
    iterable = iter(iterable)
    try:
        while True:
            a = next(iterable)
            b = next(iterable)
            yield a, b
    except StopIteration:
        pass
    
def plot_projections(coordinates, pairs, dirname, sample_names, labels=None):
    if len(pairs) % 2 != 0:
        print("Error: PCs must be provided in pairs of 2")
        sys.exit(1)

    if not os.path.exists(dirname):
        os.makedirs(dirname)

    for p1, p2 in pairwise(pairs):
        fig_flname = os.path.join(dirname,
                                  "pca_projection_%s_%s.png" % (str(p1), str(p2)))
        plt.clf()
        fig = plt.gcf()
        fig.set_dpi(150)

        if labels is None:        
            plt.scatter(coordinates[:, p1 - 1],
                        coordinates[:, p2 - 1])
        else:
            label_samples = defaultdict(list)
            for sample_name, label_name in labels.items():
                sample_idx = sample_names.index(sample_name)
                label_samples[label_name].append(sample_idx)

            for i, (label, samples) in enumerate(label_samples.items()):
                plt.scatter(coordinates[samples, p1 - 1],
                            coordinates[samples, p2 - 1],
                            label=label)
                plt.legend()

        plt.xlabel("Component %s" % p1, fontsize=16)
        plt.ylabel("Component %s" % p2, fontsize=16)
        plt.savefig(fig_flname)

def test_pcs(pc_coordinates, sample_names, sample_labels):
    for i in range(pc_coordinates.shape[1]):
        feature_to_coords = defaultdict(list)
        for j, name in enumerate(sample_names):
            label = sample_labels[name]
            feature_to_coords[label].append(pc_coordinates[j, i])

        if len(feature_to_coords) < 2:
            pvalue = 1.0
        else:
            _, pvalue = stats.f_oneway(*feature_to_coords.values())

            if np.isnan(pvalue) or np.isinf(pvalue):
                pvalue = 1.0

        print("Component:", (i+1))
        print("p-value: ", pvalue)
        print()    

def parseargs():
    parser = argparse.ArgumentParser()

    parser.add_argument("--coordinates",
                        type=str,
                        required=True)

    subparsers = parser.add_subparsers(dest="mode", required=True)

    plot_parser = subparsers.add_parser("plot-projections",
                                        help="Plot PCA projections")
    
    plot_parser.add_argument("--plot-dir",
                             type=str,
                             required=True)

    plot_parser.add_argument("--pairs",
                             nargs="+",
                             type=int,
                             required=True)

    plot_parser.add_argument("--labels-fl",
                             type=str,
                             help="Labels file to use in coloring points")

    label_test_parser = subparsers.add_parser("test-pcs",
                                              help="Run association tests on PCs vs labels")

    label_test_parser.add_argument("--labels-fl",
                                   type=str,
                                   required=True,
                                   help="Labels file")
    
    return parser.parse_args()

if __name__ == "__main__":
    args = parseargs()

    if not os.path.exists(args.coordinates):
        print("Coordinates file path is invalid")
        sys.exit(1)

    sample_names, coordinates = read_pca_coordinates(args.coordinates)

    print(coordinates.shape)

    if args.mode == "plot-projections":
        labels = None
        if args.labels_fl:
            labels = read_label_names(args.labels_fl)
        plot_projections(coordinates,
                         args.pairs,
                         args.plot_dir,
                         sample_names,
                         labels=labels)

    elif args.mode == "test-pcs":
        labels = read_labels(args.labels_fl)
        test_pcs(coordinates,
                 sample_names,
                 labels)
        
    else:
        print("Unknown mode '%s'" % args.mode)
        sys.exit(1)
