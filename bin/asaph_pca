#!/usr/bin/env python3

"""
Copyright 2017 Ronald J. Nowling

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import argparse
from collections import defaultdict
import os
import sys

import joblib
import matplotlib
matplotlib.use("PDF")
import matplotlib.pyplot as plt
import numpy as np
from sklearn.decomposition import PCA

from asaph.newioutils import read_features
from asaph.newioutils import deserialize
from asaph.newioutils import PROJECT_SUMMARY_FLNAME

MODEL_KEY = "model"
PROJECTION_KEY = "projected-coordinates"

def train(args):
    workdir = args.workdir

    models_dir = os.path.join(workdir,
                              "models")
    if not os.path.exists(models_dir):
        os.makedirs(models_dir)

    features = read_features(workdir)

    pca = PCA(n_components = args.n_components,
              whiten = True)
        
    projections = pca.fit_transform(features.feature_matrix)

    model = { MODEL_KEY : pca,
              PROJECTION_KEY : projections}

    model_fl = os.path.join(models_dir,
                            "pca.pkl")
    joblib.dump(model,
                model_fl)

def explained_variance_analysis(args):
    workdir = args.workdir

    figures_dir = os.path.join(workdir, "figures")
    if not os.path.exists(figures_dir):
        os.makedirs(figures_dir)

    model_fl = os.path.join(workdir,
                            "models",
                            "pca.pkl")

    model = joblib.load(model_fl)

    explained_variance_ratios = model[MODEL_KEY].explained_variance_ratio_

    fig_flname = os.path.join(figures_dir,
                              "pca_explained_variance_ratios.png")

    print(explained_variance_ratios)

    plt.clf()
    plt.grid(True)
    fig = plt.gcf()
    fig.set_dpi(150)
    plt.plot(range(1, len(explained_variance_ratios) + 1),
             explained_variance_ratios, "m.-")
    plt.xlabel("Principal Component", fontsize=16)
    plt.ylabel("Explained Variance Ratio", fontsize=16)
    plt.ylim([0., 1.])
    plt.savefig(fig_flname)

def output_coordinates(args):
    workdir = args.workdir

    project_summary = deserialize(os.path.join(workdir,
                                               PROJECT_SUMMARY_FLNAME))

    model_fl = os.path.join(workdir,
                            "models",
                            "pca.pkl")
    model = joblib.load(model_fl)    
    projected = model[PROJECTION_KEY]
    selected = projected[:, list(map(lambda idx: idx - 1, args.selected_components))]

    features = read_features(workdir)

    with open(args.output_fl, "w") as fl:
        headers = ["sample", "population_name"]
        headers.extend(map(str, args.selected_components))
        fl.write("\t".join(headers))
        fl.write("\n")

        for i in range(len(features.sample_labels)):
            sample = features.sample_labels[i]
            line = [sample]
            line.extend(map(str, selected[i, :]))
            fl.write("\t".join(line))
            fl.write("\n")

def parseargs():
    parser = argparse.ArgumentParser(description="Asaph - Dimensionality Reduction")

    parser.add_argument("--workdir",
                        type=str,
                        required=True,
                        help="Work directory")

    subparsers = parser.add_subparsers(dest="mode")
    
    train_parser = subparsers.add_parser("train",
                                         help="Train dimensionality reduction model")
    
    train_parser.add_argument("--n-components",
                              type=int,
                              required=True,
                              help="Number of PCs to compute")

    eva_parser = subparsers.add_parser("explained-variance-analysis",
                                       help="Compute explained variances of PCs")

    output_parser = subparsers.add_parser("output-coordinates",
                                      help="Output PC projected coordinates")
        
    output_parser.add_argument("--selected-components",
                               type=int,
                               nargs="+",
                               help="Components to output")

    output_parser.add_argument("--output-fl",
                               type=str,
                               required=True,
                               help="Output file")
    
    return parser.parse_args()

if __name__ == "__main__":
    args = parseargs()

    if args.mode == "train":
       train(args) 
    elif args.mode == "explained-variance-analysis":
        explained_variance_analysis(args)
    elif args.mode == "output-coordinates":
        output_coordinates(args)
    else:
        print("Unknown mode '%s'" % args.mode)
        sys.exit(1)
