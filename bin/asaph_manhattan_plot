#!/usr/bin/env python3
"""
Copyright 2018 Ronald J. Nowling

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import argparse

import matplotlib
matplotlib.use("PDF")
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import scipy.stats as stats

ALPHA = 0.01

def read_snp_table(flname, component, chromosome):
    with open(flname) as fl:
        df = pd.read_csv(fl, delim_whitespace=True)
        df["chrom"] = df["chrom"].astype(str)
        mask = (df["chrom"] == chromosome) & (df["component"] == component)

        df = df[mask]
        df = df.sort_values(by="pos")
        
    return df

def mark_significant_snps(df, threshold=None):
    if threshold is None:
        threshold = ALPHA / len(df)

    df["is_significant"] = 0.0
    mask = df["pvalue"] < threshold
    df.loc[mask, "is_significant"] = 1.0    

    return df

def find_inversion_boundaries(df, n_windows, threshold=None):
    min_pos = min(df["pos"])
    max_pos = max(df["pos"])
    windows = np.linspace(min_pos, max_pos, num=n_windows)
    left_boundary = None
    right_boundary = None
    if threshold is None:
        threshold = 0.0001 / len(windows)

    # expected probability of a SNP being
    # significant assuming uniform distribution
    n_sig_snps = len(df[df["is_significant"] == 1])
    exp_prob = n_sig_snps / len(df)

    print(n_windows, n_sig_snps, len(df), threshold, exp_prob)

    n_sig_wins = 0
    for i in range(n_windows - 1):
        mask = (df["pos"] >= windows[i]) & (df["pos"] < windows[i+1])
        df_window = df[mask]

        # number of trials (SNPs per window)
        win_snps = len(df_window)
        
        # number of successes (sig SNPs per window)
        win_sig_snps = len(df_window[df_window["is_significant"] == 1])
        
        #if len(sign_snp_marks) >= 2 and np.mean(sign_snp_marks) != 0.0:
        #    _, win_pvalue = stats.ttest_1samp(sign_snp_marks, 0.0)
        win_pvalue = stats.binom_test(win_sig_snps,
                                      win_snps,
                                      exp_prob,
                                      alternative="greater")
                                      
        if win_pvalue < threshold:
            n_sig_wins += 1
            right_boundary = max(df_window["pos"])
            if left_boundary is None:
                left_boundary = min(df_window["pos"])

    print(n_sig_wins, "of", n_windows, "were significant")

    return left_boundary, right_boundary

def parseargs():
    parser = argparse.ArgumentParser()
            
    parser.add_argument("--input-tsv",
                        required=True,
                        type=str)

    parser.add_argument("--plot-fl",
                        required=True,
                        type=str)

    parser.add_argument("--component",
                        required=True,
                        type=int)

    parser.add_argument("--chromosome",
                        required=True,
                        type=str)
    
    parser.add_argument("--y-limit",
                        type=float)

    parser.add_argument("--n-windows",
                        type=int,
                        default=10000)
    
    return parser.parse_args()

if __name__ == "__main__":
    args = parseargs()

    print("Reading SNP association p-values")
    df = read_snp_table(args.input_tsv,
                        args.component,
                        args.chromosome)

    print("Identifying SNPs with stat sig associations")
    df = mark_significant_snps(df)

    print("Identifying inversion boundaries")
    if args.n_windows != -1:
        left_boundary, right_boundary = find_inversion_boundaries(df,
                                                                  args.n_windows)

        print("Left boundary:", left_boundary)
        print("Right_boundary:", right_boundary)

        plt.plot([left_boundary, left_boundary],
                 [0, max_value],
                 "k-",
                 label="Boundary")

        plt.plot([right_boundary, right_boundary],
                 [0, max_value],
                 "k-")

        plt.legend()

    print("Plotting")
    fig = plt.gcf()
    fig.set_dpi(200)

    max_value = 0
    
    df_insign = df[df["is_significant"] == 0]
    if len(df_insign) != 0:
        log10pvalues = -np.log10(df_insign["pvalue"])
        plt.scatter(df_insign["pos"],
                    log10pvalues,
                    marker=".")

        max_value = max(max_value,
                        max(log10pvalues))

    df_sig = df[df["is_significant"] == 1]
    if len(df_sig) != 0:
        log10pvalues = -np.log10(df_sig["pvalue"])
        plt.scatter(df_sig["pos"],
                    log10pvalues,
                    marker=".",
                    label="Significant")

        max_value = max(max_value,
                        max(log10pvalues))


    plt.xlabel("Position (bp)", fontsize=16)
    plt.ylabel("SNP p-value (-log10)", fontsize=16)

    if args.y_limit:
        plt.ylim([0, args.y_limit])
    else:
        plt.ylim([0.0, max_value])

    plt.savefig(args.plot_fl)
                

        


